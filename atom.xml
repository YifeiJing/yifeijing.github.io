<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yifeijing.github.io</id>
    <title>Moriturus Te Saluto</title>
    <updated>2021-11-19T11:30:49.329Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yifeijing.github.io"/>
    <link rel="self" href="https://yifeijing.github.io/atom.xml"/>
    <subtitle>Yifei&apos;s personal blog!</subtitle>
    <logo>https://yifeijing.github.io/images/avatar.png</logo>
    <icon>https://yifeijing.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Moriturus Te Saluto</rights>
    <entry>
        <title type="html"><![CDATA[Development of Cat run on menu bar]]></title>
        <id>https://yifeijing.github.io/post/development-of-cat-run-on-menu-bar/</id>
        <link href="https://yifeijing.github.io/post/development-of-cat-run-on-menu-bar/">
        </link>
        <updated>2021-11-19T14:54:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This is a desktop app which adds a small cat on the menu bar. The cat is running at a speed relating to the CPU usage.<br>
Based on <a href="https://apps.apple.com/jp/app/runcat/id1429033973?l=en&amp;mt=12">RunCat</a>, which has a full functionality, this is a free open-source version provided by the author.<br>
Through learning this version, the basement of developing an App on the menu bar can be somehow interpretated.</p>
<h2 id="elaboration">Elaboration</h2>
<p>By clone the <a href="https://github.com/Kyome22/menubar_runcat">repository</a>, a program fully written in Swift can be compiled to run. The result is just one cat running.<br>
<img src="https://yifeijing.github.io/post-images/1637316405754.gif" alt="" loading="lazy"><br>
The basic function (how to get the cat running in the menu bar) can be found in the file <em>AppDelegate.swift</em>. Actually, it's a <em>status item</em> with its <em>button</em> image changed ever since.</p>
<p>The images are previously prepared. To let the user see the cat running, the author prepared five pictures where cat in different postures have been drawn. The application loads these images on launching the app, then the button image changes by adding asynchronous task which executes at a later time.</p>
<pre><code class="language-Swift">func animate() {
        statusItem.button?.image = frames[cnt]
        cnt = (cnt + 1) % frames.count
        if !isRunning { return }
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + interval) {
            self.animate()
        }
    }
</code></pre>
<p>The time of executing the task is dependent on parameter <em>deadline</em>, which stores the time after an &quot;interval&quot;. This variable is appdated by the timer.</p>
<pre><code class="language-Swift">func startRunning() {
        cpuTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: { (t) in
            self.usage = self.cpu.usageCPU()
            self.interval = 0.02 * (100 - max(0.0, min(99.0, self.usage.value))) / 6
            self.statusItem.button?.title = self.isShowUsage ? self.usage.description : &quot;&quot;
        })
        cpuTimer?.fire()
        isRunning = true
        animate()
    }
</code></pre>
<p>The value is based on the usage of the CPU, the more the CPU is used, the smaller this value is. As the interval gets smaller when CPU usage is larger, the frequncy of updating the images increases, thus the cat runs faster.</p>
<h2 id="changing-to-other-images">Changing to other images</h2>
<p>The inspiration is from one of my friend, who asked me whether the cat can be replaced by a penguin. I said yes, as I know it is just a set of pictures. Then I dig into the the specifications of the images. Actually, there is only the height restriction on the images, which should be 36xp.</p>
<p>I first used the <em>React</em> brand, that blue atom. I want it to rotate. Then I found the source image on the web. I use <em>GIMP</em> to rotate with 15, 30, 45 degrees. The reason is that it has six equal part, and rotating 60 degrees is the same as the original one. Add these images to the project Assets, then load them in the code. The rotating atom can be seen on the menu bar.<br>
<img src="https://yifeijing.github.io/post-images/1637318261155.gif" alt="" loading="lazy"></p>
<p>Finally, the penguin of <em>Suica</em> was tried.</p>
<img src="https://www.jrepoint.jp/resource/img/information/penguincalendar/2021/penguin_01.svg" alt="drawing" width="200"/>
<p>The penguin only has one pose, so I edited the picture to perform walking.<br>
<img src="https://yifeijing.github.io/post-images/1637318479594.gif" alt="" loading="lazy"><br>
Then, the penguin face version was also created.</p>
<figure data-type="image" tabindex="1"><img src="https://yifeijing.github.io/post-images/1637318774101.gif" alt="" loading="lazy"></figure>
<h2 id="challenge">Challenge</h2>
<p>The lastest idea is that, using the most beautiful mathematical equation: <strong>Euler's equation</strong> to draw a rotating circle which generates sinusoidal waves with frequency related to the CPU usage.<br>
<img src="https://upload.wikimedia.org/wikipedia/commons/3/3b/Circle_cos_sin.gif" alt="" loading="lazy"><br>
While this time, we cannot depend on pictures, as the waves are changing with frequency, that is to say, they should be created and rendered in time.</p>
<p>To move further, check the documentation of <a href="https://developer.apple.com/documentation/appkit/nsimage">NSImage</a>.<br>
At the <code>Overview</code> part, there is one item:</p>
<blockquote>
<p>Drawing images into a view or graphics context.</p>
</blockquote>
<p>Thus, it is possible to perform drawing into a context and render it later.</p>
<p>Actually, the drawing facilities are based on <em>Apple</em>'s <em>Cocoa</em> framework, which was originally the graphic library of X OS.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aperture]]></title>
        <id>https://yifeijing.github.io/post/aperture/</id>
        <link href="https://yifeijing.github.io/post/aperture/">
        </link>
        <updated>2021-11-19T06:38:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="what-is-aperture">What is aperture?</h2>
<blockquote>
<p>The hole in the lens, through which light travels into the camera body and onto the camera sensor.</p>
</blockquote>
<p>Normally, the larger the aperture size is, the more light that enters into the camera.</p>
<h2 id="f-numbering">F numbering</h2>
<p><em>F-Stop</em> is <strong>inversely</strong> related to the aperture size.<br>
The specifications of the lens show the maximum and minimum aperture sizes.<br>
Mostly, the maximum aperture size is considered, as it indicates the speed of the lens.<br>
Fast lens are usually have a maximum aperture from 1.4 to 5.6.</p>
<h2 id="two-kinds-of-lenses">Two kinds of lenses</h2>
<p><em>Prime lens</em>: a fixed focal length and a fixed maximum aperture<br>
<em>Zoom lens</em>: zoom in and out stationary, while the maximum aperture always gets smaller, as the focal length increases</p>
<h2 id="applications">Applications</h2>
<p>As the aperture controls the amount of light entering into the camera, the shutter speed and ISO are also affected.<br>
A larger aperture allows more light to enter the camera, thus a faster shutter speed and a smaller ISO value can be achieved. This is beneficial to eliminate the motion blur and reduce the noise into the camera. Large aperture is also needed in capturing night scenes.<br>
A smaller aperture can be used in shooting landscape in day light as it focus everything in the scene.</p>
<h2 id="resource">Resource</h2>
<p><a href="https://www.youtube.com/watch?v=YojL7UQTVhc">Camera Basics - Aperture</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to build a website for free (The method of building this website)]]></title>
        <id>https://yifeijing.github.io/post/how-to-build-a-website-for-free-the-method-of-building-this-website/</id>
        <link href="https://yifeijing.github.io/post/how-to-build-a-website-for-free-the-method-of-building-this-website/">
        </link>
        <updated>2021-11-18T13:53:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="recipe">Recipe</h2>
<ul>
<li><a href="https://github.com/getgridea/gridea">Gridea</a>: A static blog writing client</li>
<li><a href="https://docs.github.com/en/pages/getting-started-with-github-pages">Github Pages</a>: A static site hosting service based on a repository on Github</li>
</ul>
<h2 id="method">Method</h2>
<ol>
<li>Get the <strong>Gridea</strong> installed on your device</li>
<li>Register for a <strong>Github</strong> account</li>
<li>Create a new repository with its name specifically be <code>&lt;username&gt;.github.io</code>  <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, where <code>&lt;username&gt;</code> is the placeholder for you user name</li>
<li>Direct to <em>Settings</em> -&gt; <em>Developer settings</em> -&gt; <em>Personal access tokens</em>, and <em>Generate new token</em> here</li>
<li>At the <em>Select scopes</em> region, check <em>repo</em>, then <em>Generate token</em></li>
<li>Copy that token and paste it to the corresponding place in <strong>Gridea</strong>'s server panel</li>
<li>Fill in the domain part and repository part with <code>&lt;username&gt;.github.io</code>, which you created before</li>
<li>Branch is normally &quot;main&quot;, and Branch username is your username</li>
<li>Other parts are ok to be empty</li>
<li>Save and Synchronize</li>
</ol>
<h2 id="advanced">Advanced</h2>
<p>In the <em>Theme</em> part of <strong>Gridea</strong>, other themes created by users can be deployed, which, apart from writing blogs, may be another time-costing task. The theme of this blog called &quot;Next&quot; was created by users and a lot of plug-ins have been integrated.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>The reason is that <strong>Github</strong> automatically creates the <strong>Github Pages</strong> for this domain name, and the <strong>Gridea</strong> assumes that the user is using the default domain, so that other problems of root path can be solved. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PLT Self-summaries (Based on the book Simply Logical)]]></title>
        <id>https://yifeijing.github.io/post/plt-self-summaries-based-on-the-book-simply-logical/</id>
        <link href="https://yifeijing.github.io/post/plt-self-summaries-based-on-the-book-simply-logical/">
        </link>
        <updated>2021-11-18T12:32:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="simply-logical">Simply logical</h1>
<h2 id="logical-programming">Logical programming</h2>
<hr>
<h3 id="what-is-it">What is it</h3>
<p>Rather than viewing a computer program as a step-by-step description of an algorithm, the program is conceived as a logical theory, and a procedure call is viewed as a theorem of which the truth needs to be established. Thus, executing a program means searching for a proof.</p>
<h3 id="about-the-variables">About the variables</h3>
<p>In imperative languages, a variable is a name for a memory location which can store data of certain types. While the contents of the location may vary over time, the variable always points to the same location. In fact, the term ‘variable’ is a bit of a misnomer here, since it refers to a value that is well-defined at every moment. In contrast, a variable in a logic program is a variable in the mathematical sense, i.e. a placeholder that can take on any value. In this respect, Logic Programming is therefore much closer to mathematical intuition than imperative programming.</p>
<h3 id="machine-model">Machine model</h3>
<p>A machine model is an abstraction of the computer on which programs are executed. The imperative paradigm assumes a dynamic, state-based machine model, where the state of the computer is given by the contents of its memory. The effect of a program statement is a transition from one state to another. Logic Programming does not assume such a dynamic machine model. Computer plus program represent a certain amount of knowledge about the world, which is used to answer queries.</p>
<h2 id="propositional-clausal-logics">Propositional Clausal logics</h2>
<hr>
<h3 id="nomenclature">Nomenclature</h3>
<p><em>facts</em>: Unconditional truths.<br>
<em>rules</em>: Conditional truths.<br>
<em>query</em>: &quot;?-&quot;<br>
<em>answer</em>:{-&gt;}<br>
<em>ground fact</em>: A fact without variables.<br>
<em>proposition</em>: Any statement which is either true or false.<br>
<em>atom</em>: A single word starting with a lowercase character and denoting a <em>proposition</em>.<br>
<em>clause</em>: Combined atoms.<br>
<em>program</em>: A set of <em>clauses</em>, each of them is terminated by a period.<br>
<em>Herbrand Base</em>: The set of <em>atoms</em> occuring in a <em>program</em>.<br>
<em>Herbrand Interpretation</em>: A mapping from the <em>Herbrand Base</em> of a <em>program</em> into the set of truth values.<br>
<em>Model</em>: If a <em>clause</em> is true in an <em>interpretation</em>, we say that the <em>interpretation</em> is a <em>model</em> for the <em>clause</em>. An <em>interpretation</em> is a <em>model</em> for a <em>program</em> if it is a <em>model</em> for each <em>clause</em> in the <em>program</em>.<br>
<em>logical consequence</em>: A <em>clause</em> is a <em>logical consequence</em> of a <em>program</em>, if every <em>model</em> of the <em>program</em> is also a <em>model</em> of the <em>clause</em>.<br>
<em>resolution</em>: a single inference step to derive the <em>solvent</em></p>
<h3 id="general-reasoning-pattern">General reasoning pattern</h3>
<p>To answer a query ?- Q1, Q2, …, Qn, find a rule A :- B1, …, Bm such that A matches with Q1, and answer the query ?- B1, …, Bm, Q2, …, Qn.</p>
<h3 id="clause-values">Clause values</h3>
<p>Since a Herbrand interpretation assigns truth values to every atom in a clause, it also assigns a truth value to the clause as a whole. The rules for determining the truth value of a clause from the truth values of its atoms are not so complicated, if you keep in mind that the body of a clause is a conjunction of atoms, and the head is a disjunction. Consequently, the body of a clause is true if every atom in it is true, and the head of a clause is true if at least one atom in it is true.</p>
<h3 id="unresolved-question">Unresolved question</h3>
<p>It is easy to show that propositional resolution is sound: you have to establish that every model for the two input clauses is a model for the resolvent. In our earlier example, every model of married;bachelor:-man,adult and has_wife:-man,married must be a model of has_wife;bachelor:-man,adult. Now, the literal resolved upon (in this case married) is either assigned the truth value true or false. In the first case, every model of has_wife:-man,married is also a model of has_wife:-man; in the second case, every model of married;bachelor:-man,adult is also a model of bachelor:-man,adult. In both cases, these models are models of a subclause of the resolvent, which means that they are also models of the resolvent itself.</p>
<h3 id="reduction-to-absurd">Reduction to absurd</h3>
<p>By proofing inconsistency of the logical consequence (the right side becomes empty), the logical consequence is proved.</p>
<h2 id="relational-clausal-logic">Relational Clausal logic</h2>
<hr>
<h3 id="semantics">Semantics</h3>
<p><em>Herbrand universe</em>: the set of <em>ground terms</em><br>
<em>Herbrand base</em>: the set of <em>ground atoms</em> that can be constructed using predicates in the program and the <em>ground terms</em> in <em>Herbrand universe</em><br>
<em>Herbrand interpretation</em>: the subset of the <em>Herbrand base</em> whose elements are assigned the truth value true.</p>
<h3 id="syntax">Syntax</h3>
<p><em>constant</em>: individual name<br>
<em>variable</em>: arbitrary individual<br>
<em>term</em>: <em>constant</em> and <em>variable</em><br>
<em>atom</em>: a predicate followed by a number of <em>terms</em><br>
<em>ground term</em>: a term without <em>variables</em><br>
<em>ground atom</em>: an atom without <em>variables</em></p>
<h3 id="proof-theory">Proof theory</h3>
<p><em>unification</em>: making a pair of atoms the same by substitution of the <em>variables</em><br>
<em>most general unifier</em>: the most general <em>unifier</em>, which is a <em>substitution</em><br>
<em>proof tree</em>: two clauses on a row are input clauses for a resolution step, and they are connected by lines to their resolvent</p>
<h4 id="strategy">strategy</h4>
<p>proof by refutation. Starts a query, then finds an inconsistency by means of resolution.</p>
<h3 id="meta-theory">Meta-theory</h3>
<p>finite</p>
<h2 id="full-clausal-logic">Full clausal logic</h2>
<hr>
<h3 id="syntax-2">Syntax</h3>
<p><em>term</em>: Constants and variables are <em>simple terms</em>. A <em>complex term</em> is a functor followed by a number of terms.</p>
<h3 id="semantics-2">Semantics</h3>
<p><em>Herbrand universe</em>: the set of ground terms that can be constructed from constants and functors in the program</p>
<h2 id="definite-clause-logic">Definite clause logic</h2>
<hr>
<h2 id="sld-resolution">SLD Resolution</h2>
<p>S for <em>selection rule</em>, L for <em>linear</em> resolution, D for <em>definite</em> clauses.</p>
<h3 id="method">Method</h3>
<p><em>backtracking</em>: Pop the upper resolvent from the stack, and search for the next program clause</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About]]></title>
        <id>https://yifeijing.github.io/post/about/</id>
        <link href="https://yifeijing.github.io/post/about/">
        </link>
        <updated>2021-11-18T12:07:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Welcome to my site, it's my pleasure to meet you!<br>
欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="about-this-website-关于本站">🏠 About this website 关于本站</h2>
<p>This website is established based on a static website app called <em>Gridea</em>. Under this app, all passage and creatings can be make solely by <em>markdown</em>.</p>
<p>Don't know what to do though, とりあえず何かを書きましょうか.<br>
I was always thinking to record my life in some ways, and this may be a solution.<br>
Buttttttt! Writing is a time-costing work. Anyway, try to be productive!</p>
<h2 id="about-me-博主是谁">👨‍💻 About me 博主是谁</h2>
<ul>
<li>A student 🎓</li>
<li>A developer 🔨</li>
<li>A bloger (Maybe) 🖊</li>
</ul>
<p>I have been always thinking writing a comprehensive and inclusive description about me, however, this task always failed with subjective perspectives. The reason, as I have written so many self-introduces, happens to be that man is living with multiple identities, which cannot be unified by some universal introductions. Some of them can be so hard to elaborate to whoever I meet that talking always ends with embarassments and exhaustions. Thus, I chose to tag me with some common identities, and hoped that will be better to start dialogs.</p>
<h2 id="interests-兴趣爱好">⛹ Interests 兴趣爱好</h2>
<p>badminton 🏸 &amp; languages 📚</p>
<p>Bare metal &amp; SoC</p>
<h2 id="contacts-联系我呀">📬 Contacts 联系我呀</h2>
<p>emial: yifei.j@ik.me</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hermann Hesse Quotes]]></title>
        <id>https://yifeijing.github.io/post/hermann-hesse-quotes/</id>
        <link href="https://yifeijing.github.io/post/hermann-hesse-quotes/">
        </link>
        <updated>2021-09-26T12:26:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hermann Hesse, a German-Swiss poet, novelist, has been deeply influenced me during the time of an undergraduate. The book <strong>Siddhartha</strong> has been my favorite book. This article is to include some famous quotes from him.</p>
<h2 id="quotes">Quotes</h2>
<ul>
<li>If I know what love is, it is because of you.</li>
<li>Some of us think holding on makes us strong; but sometimes it is letting go.</li>
<li>If you hate a person, you hate something in him that is part of yourself. What isn't part of ourselves doesn't disturb us.</li>
<li>The truth is lived, not taught.</li>
<li>Happiness is a how; not a what. A talent, not an object.</li>
<li>Eternity is a mere moment, just long enough for a joke.</li>
<li>One never reaches home, but wherever friendly paths intersect the whole world looks like home for a time.</li>
<li>Love of God is not always the same as love of good.</li>
<li>The world is not imperfect or slowly evolving along a path to perfection. No, it is perfect at every moment, every sin already carries grace in it.</li>
<li>Our mind is capable of passing beyond the dividing line we have drawn for it. Beyond the pairs of opposites of which the world consists, other, new insights begin.</li>
<li>It may be important to great thinkers to examine the world, to explain and despise it. But I think it is only important to love the world, not to despise it, not for us to hate each other, but to be able to regard the world and ourselves and all beings with love, admiration and respect.</li>
</ul>
<h2 id="links">Links</h2>
<p><a href="https://www.goodreads.com/quotes/tag/hermann-hesse">Goodreads</a><br>
<a href="https://www.brainyquote.com/authors/hermann-hesse-quotes">BrainyQuotes</a><br>
<a href="https://everydaypower.com/hermann-hesse-quotes/">EverydayPower</a></p>
]]></content>
    </entry>
</feed>